#Create a view called no_invoices. This view should display all information for customers who have no invoices. After creating this view, select from it and show only a list of customer emails.

CREATE OR REPLACE VIEW `no_invoices` AS
SELECT *
FROM `customer` 
WHERE `customer_id` NOT IN
(SELECT `customer_id` FROM `invoice`);

#After creating the view, select from it.
SELECT `email`
FROM `no_invoices`;

#Create a view called invoice_summary. This view should display the invoice ID, date in, date out, description, quantity, and price. After creating this view, select from it while showing order summaries for those containing men's shirts where the date out was on or after October 1, 2019.
CREATE OR REPLACE VIEW `invoice_summary` AS
SELECT i.`invoice_id`, i.`date_in`, i.`date_out`, ii.`description`,iii. `quantity`, ii.`price`
FROM `invoice` i
INNER JOIN `invoice_item` iii ON i.`invoice_id` = iii.`invoice_id`
INNER JOIN `item` ii ON iii.`item_id` = ii.`item_id`;

#After creating the view, select from it.
SELECT *
FROM `invoice_summary`
WHERE `description`= 'Men''s Shirt' AND `date_out` >= '2019-10-01';


#Create a procedure named price_change that takes two input parameters (i.e. item ID and price). The procedure should use the item ID and price input parameters to change the price for the given item. Provide the code that would test to see if your procedure works.
DELIMITER $$
CREATE PROCEDURE price_change(IN vItemID varchar(50), IN vprice double(100,2))
BEGIN
UPDATE `item`
SET `price` = vprice
WHERE `item_id` = vItemID;
END$$
DELIMITER ;

CALL price_change(2, 2.5);


#Create a function named invoice_total that will return the total for a given invoice (i.e. invoice ID). Select from this function displaying the invoice ID and the total for the selected invoice. Sort the results by total in descending order.
DELIMITER $$
CREATE FUNCTION invoice_total (vInvoiceID integer) RETURNS integer 
BEGIN 
SET @total= NULL;
SELECT sum(`quantity`) INTO @total
FROM `invoice_item`
WHERE `invoice_id`= vInvoiceID
GROUP BY `invoice_id`;
RETURN (@total);
END $$
DELIMITER;

SELECT `invoice_id`, invoice_total(`invoice_id`) AS `total`
FROM `invoice_item`
GROUP BY `invoice_id`
ORDER BY `total` DESC;

#Create a trigger named invalid_date that checks if the invoice date in is before today. If this is the case supply the new record with the current date. Test to see if your trigger works.
DELIMITER $$
CREATE TRIGGER `invalid_date`
  BEFORE INSERT ON `invoice`
  FOR EACH ROW
BEGIN
  IF new.`date_in` < NOW() THEN
     SET new.`date_in`=Curdate();
  END IF;
END$$
DELIMITER ;



INSERT INTO `invoice`(`invoice_id`,`date_in`, `date_out`, `customer_id`)
VALUE (300, '2018-11-09', '2020-01-24',9);

select *
from `invoice`
where `invoice_id` = 300;
